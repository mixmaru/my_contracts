// Code generated by MockGen. DO NOT EDIT.
// Source: domains/contracts/application_service/interfaces/right_to_use_repository_interface.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/mixmaru/my_contracts/domains/contracts/entities"
	gorp "gopkg.in/gorp.v2"
	reflect "reflect"
	time "time"
)

// MockIRightToUseRepository is a mock of IRightToUseRepository interface.
type MockIRightToUseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRightToUseRepositoryMockRecorder
}

// MockIRightToUseRepositoryMockRecorder is the mock recorder for MockIRightToUseRepository.
type MockIRightToUseRepositoryMockRecorder struct {
	mock *MockIRightToUseRepository
}

// NewMockIRightToUseRepository creates a new mock instance.
func NewMockIRightToUseRepository(ctrl *gomock.Controller) *MockIRightToUseRepository {
	mock := &MockIRightToUseRepository{ctrl: ctrl}
	mock.recorder = &MockIRightToUseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRightToUseRepository) EXPECT() *MockIRightToUseRepositoryMockRecorder {
	return m.recorder
}

// GetRecurTargets mocks base method.
func (m *MockIRightToUseRepository) GetRecurTargets(executeDate time.Time, executor gorp.SqlExecutor) ([]*entities.RightToUseEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecurTargets", executeDate, executor)
	ret0, _ := ret[0].([]*entities.RightToUseEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecurTargets indicates an expected call of GetRecurTargets.
func (mr *MockIRightToUseRepositoryMockRecorder) GetRecurTargets(executeDate, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecurTargets", reflect.TypeOf((*MockIRightToUseRepository)(nil).GetRecurTargets), executeDate, executor)
}
