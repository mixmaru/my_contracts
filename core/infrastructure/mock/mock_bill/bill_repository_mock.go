// Code generated by MockGen. DO NOT EDIT.
// Source: core/application/bill/i_bill_repository.go

// Package mock_bill is a generated GoMock package.
package mock_bill

import (
	gomock "github.com/golang/mock/gomock"
	bill "github.com/mixmaru/my_contracts/core/domain/models/bill"
	gorp "gopkg.in/gorp.v2"
	reflect "reflect"
)

// MockIBillRepository is a mock of IBillRepository interface.
type MockIBillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBillRepositoryMockRecorder
}

// MockIBillRepositoryMockRecorder is the mock recorder for MockIBillRepository.
type MockIBillRepositoryMockRecorder struct {
	mock *MockIBillRepository
}

// NewMockIBillRepository creates a new mock instance.
func NewMockIBillRepository(ctrl *gomock.Controller) *MockIBillRepository {
	mock := &MockIBillRepository{ctrl: ctrl}
	mock.recorder = &MockIBillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBillRepository) EXPECT() *MockIBillRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBillRepository) Create(billEntity *bill.BillEntity, executor gorp.SqlExecutor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", billEntity, executor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBillRepositoryMockRecorder) Create(billEntity, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBillRepository)(nil).Create), billEntity, executor)
}

// GetById mocks base method.
func (m *MockIBillRepository) GetById(id int, executor gorp.SqlExecutor) (*bill.BillEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, executor)
	ret0, _ := ret[0].(*bill.BillEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIBillRepositoryMockRecorder) GetById(id, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIBillRepository)(nil).GetById), id, executor)
}

// GetByUserId mocks base method.
func (m *MockIBillRepository) GetByUserId(userId int, executor gorp.SqlExecutor) ([]*bill.BillEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId, executor)
	ret0, _ := ret[0].([]*bill.BillEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIBillRepositoryMockRecorder) GetByUserId(userId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIBillRepository)(nil).GetByUserId), userId, executor)
}
