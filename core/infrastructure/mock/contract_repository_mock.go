// Code generated by MockGen. DO NOT EDIT.
// Source: core/application/contracts/i_contract_repository.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	gomock "github.com/golang/mock/gomock"
	contract "github.com/mixmaru/my_contracts/core/domain/models/contract"
	gorp "gopkg.in/gorp.v2"
	reflect "reflect"
	time "time"
)

// MockIContractRepository is a mock of IContractRepository interface.
type MockIContractRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContractRepositoryMockRecorder
}

// MockIContractRepositoryMockRecorder is the mock recorder for MockIContractRepository.
type MockIContractRepositoryMockRecorder struct {
	mock *MockIContractRepository
}

// NewMockIContractRepository creates a new mock instance.
func NewMockIContractRepository(ctrl *gomock.Controller) *MockIContractRepository {
	mock := &MockIContractRepository{ctrl: ctrl}
	mock.recorder = &MockIContractRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractRepository) EXPECT() *MockIContractRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIContractRepository) Create(contractEntity *contract.ContractEntity, executor gorp.SqlExecutor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", contractEntity, executor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIContractRepositoryMockRecorder) Create(contractEntity, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIContractRepository)(nil).Create), contractEntity, executor)
}

// GetById mocks base method.
func (m *MockIContractRepository) GetById(id int, executor gorp.SqlExecutor) (*contract.ContractEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, executor)
	ret0, _ := ret[0].(*contract.ContractEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIContractRepositoryMockRecorder) GetById(id, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIContractRepository)(nil).GetById), id, executor)
}

// GetBillingTargetByBillingDate mocks base method.
func (m *MockIContractRepository) GetBillingTargetByBillingDate(billingDate time.Time, executor gorp.SqlExecutor) ([]*contract.ContractEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingTargetByBillingDate", billingDate, executor)
	ret0, _ := ret[0].([]*contract.ContractEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingTargetByBillingDate indicates an expected call of GetBillingTargetByBillingDate.
func (mr *MockIContractRepositoryMockRecorder) GetBillingTargetByBillingDate(billingDate, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingTargetByBillingDate", reflect.TypeOf((*MockIContractRepository)(nil).GetBillingTargetByBillingDate), billingDate, executor)
}

// GetRecurTargets mocks base method.
func (m *MockIContractRepository) GetRecurTargets(executeDate time.Time, executor gorp.SqlExecutor) ([]*contract.ContractEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecurTargets", executeDate, executor)
	ret0, _ := ret[0].([]*contract.ContractEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecurTargets indicates an expected call of GetRecurTargets.
func (mr *MockIContractRepositoryMockRecorder) GetRecurTargets(executeDate, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecurTargets", reflect.TypeOf((*MockIContractRepository)(nil).GetRecurTargets), executeDate, executor)
}

// Update mocks base method.
func (m *MockIContractRepository) Update(contractEntity *contract.ContractEntity, executor gorp.SqlExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", contractEntity, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIContractRepositoryMockRecorder) Update(contractEntity, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIContractRepository)(nil).Update), contractEntity, executor)
}

// GetHavingExpiredRightToUseContractIds mocks base method.
func (m *MockIContractRepository) GetHavingExpiredRightToUseContractIds(baseDate time.Time, executor gorp.SqlExecutor) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHavingExpiredRightToUseContractIds", baseDate, executor)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHavingExpiredRightToUseContractIds indicates an expected call of GetHavingExpiredRightToUseContractIds.
func (mr *MockIContractRepositoryMockRecorder) GetHavingExpiredRightToUseContractIds(baseDate, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHavingExpiredRightToUseContractIds", reflect.TypeOf((*MockIContractRepository)(nil).GetHavingExpiredRightToUseContractIds), baseDate, executor)
}
