// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domains/contracts/application_service/interfaces/user_repository_interface.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	user "github.com/mixmaru/my_contracts/internal/domains/contracts/entities/user"
	gorp "gopkg.in/gorp.v2"
	reflect "reflect"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// SaveUserIndividual mocks base method.
func (m *MockIUserRepository) SaveUserIndividual(userEntity *user.UserIndividualEntity, transaction *gorp.Transaction) (*user.UserIndividualEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserIndividual", userEntity, transaction)
	ret0, _ := ret[0].(*user.UserIndividualEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserIndividual indicates an expected call of SaveUserIndividual.
func (mr *MockIUserRepositoryMockRecorder) SaveUserIndividual(userEntity, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserIndividual", reflect.TypeOf((*MockIUserRepository)(nil).SaveUserIndividual), userEntity, transaction)
}

// GetUserIndividualById mocks base method.
func (m *MockIUserRepository) GetUserIndividualById(id int, transaction *gorp.Transaction) (*user.UserIndividualEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIndividualById", id, transaction)
	ret0, _ := ret[0].(*user.UserIndividualEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIndividualById indicates an expected call of GetUserIndividualById.
func (mr *MockIUserRepositoryMockRecorder) GetUserIndividualById(id, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIndividualById", reflect.TypeOf((*MockIUserRepository)(nil).GetUserIndividualById), id, transaction)
}

// SaveUserCorporation mocks base method.
func (m *MockIUserRepository) SaveUserCorporation(userEntity *user.UserCorporationEntity, transaction *gorp.Transaction) (*user.UserCorporationEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserCorporation", userEntity, transaction)
	ret0, _ := ret[0].(*user.UserCorporationEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserCorporation indicates an expected call of SaveUserCorporation.
func (mr *MockIUserRepositoryMockRecorder) SaveUserCorporation(userEntity, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserCorporation", reflect.TypeOf((*MockIUserRepository)(nil).SaveUserCorporation), userEntity, transaction)
}

// GetUserCorporationById mocks base method.
func (m *MockIUserRepository) GetUserCorporationById(id int, transaction *gorp.Transaction) (*user.UserCorporationEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCorporationById", id, transaction)
	ret0, _ := ret[0].(*user.UserCorporationEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCorporationById indicates an expected call of GetUserCorporationById.
func (mr *MockIUserRepositoryMockRecorder) GetUserCorporationById(id, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCorporationById", reflect.TypeOf((*MockIUserRepository)(nil).GetUserCorporationById), id, transaction)
}
